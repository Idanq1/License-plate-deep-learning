"""
Usage:
Change inputs down at main.

py models\research\object_detection\model_main_tf2.py --pipeline_config_path=CenterNet\pipeline.config --model_dir=model --alsologtostderr --num_train_steps=200 --num_eval_steps=50
"""

import os
import glob
import pandas as pd
import xml.etree.ElementTree as ET


def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    classes_names = []
    xml_list = []
    for xml_file in glob.glob(path + "/*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall("object"):

            if member[0].text == "pass":
                print(xml_file)

            classes_names.append(member[0].text)
            print(xml_file)
            value = (
                root.find("filename").text,
                int(root.find("size")[0].text),
                int(root.find("size")[1].text),
                member[0].text,
                int(member[4][0].text),
                int(member[4][1].text),
                int(member[4][2].text),
                int(member[4][3].text),
            )
            xml_list.append(value)
    column_name = [
        "filename",
        "width",
        "height",
        "class",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
    ]
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    classes_names = list(set(classes_names))
    classes_names.sort()
    return xml_df, classes_names


def main():
    input_dir = r"custom data\images\Train annots"
    output_file = r"custom data\images\train.csv"
    labelmap = r"custom data"

    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    xml_df, classes_names = xml_to_csv(input_dir)
    xml_df.to_csv(output_file, index=None)
    print("Successfully converted xml to csv.")
    if labelmap:
        os.makedirs(labelmap, exist_ok=True)
        label_map_path = os.path.join(labelmap, "label_map.txt")
        print("Generate `{}`".format(label_map_path))

        # Create the `label_map.pbtxt` file
        pbtxt_content = ""
        for i, class_name in enumerate(classes_names):
            pbtxt_content = (
                pbtxt_content
                + "item {{\n    id: {0}\n    name: '{1}'\n}}\n\n".format(
                    i + 1, class_name
                )
            )
        pbtxt_content = pbtxt_content.strip()
        with open(label_map_path, "w") as f:
            f.write(pbtxt_content)


if __name__ == "__main__":
    main()